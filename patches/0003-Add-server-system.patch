From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Tue, 23 Aug 2022 02:36:20 +0200
Subject: [PATCH] Add server system


diff --git a/api/build.gradle b/api/build.gradle
index b9b208a591122b9a83a4de7cd15d71588f2d55c6..3f4070407bd87fc711f9de60ec79197eb1436b0b 100644
--- a/api/build.gradle
+++ b/api/build.gradle
@@ -28,6 +28,7 @@ dependencies {
     api ('net.defade.bismuth:server:1.0-SNAPSHOT') {
         exclude group: "org.apache.logging.log4j"
     }
+    api 'com.github.docker-java:docker-java:3.2.13'
 
     api 'com.google.code.gson:gson:2.9.0'
     api "com.google.guava:guava:${guavaVersion}"
diff --git a/api/src/main/java/com/velocitypowered/api/proxy/server/RegisteredServer.java b/api/src/main/java/com/velocitypowered/api/proxy/server/RegisteredServer.java
index 06cd0634812f552b0ff8b4667f584682cd61d04b..b5f1e3af424c6cf2f4c01e973abe6cbf9543eb17 100644
--- a/api/src/main/java/com/velocitypowered/api/proxy/server/RegisteredServer.java
+++ b/api/src/main/java/com/velocitypowered/api/proxy/server/RegisteredServer.java
@@ -11,6 +11,7 @@ import com.velocitypowered.api.proxy.Player;
 import com.velocitypowered.api.proxy.messages.ChannelMessageSink;
 import java.util.Collection;
 import java.util.concurrent.CompletableFuture;
+import net.defade.bismuth.core.servers.Server;
 import net.kyori.adventure.audience.Audience;
 
 /**
@@ -40,4 +41,8 @@ public interface RegisteredServer extends ChannelMessageSink, Audience {
    * @return the server ping result from the server
    */
   CompletableFuture<ServerPing> ping();
+
+  Server getBismuthServer();
+
+  void setBismuthServer(Server server);
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
index 158c0d4a9f96f04c0c17715f4e9a5961497aa257..694489158328f63e488941c284d66821647394c1 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
@@ -17,6 +17,8 @@
 
 package com.velocitypowered.proxy;
 
+import com.github.dockerjava.api.DockerClient;
+import com.github.dockerjava.core.DockerClientBuilder;
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
@@ -76,6 +78,7 @@ import java.nio.file.Files;
 import java.nio.file.Path;
 import java.security.AccessController;
 import java.security.KeyPair;
+import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.security.PrivilegedAction;
 import java.util.ArrayList;
@@ -95,6 +98,7 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.IntFunction;
 import java.util.stream.Collectors;
 import net.defade.velocity.listeners.ListenersManager;
+import net.defade.velocity.servers.ServersManager;
 import net.kyori.adventure.audience.Audience;
 import net.kyori.adventure.audience.ForwardingAudience;
 import net.kyori.adventure.key.Key;
@@ -149,7 +153,9 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
   private final VelocityChannelRegistrar channelRegistrar = new VelocityChannelRegistrar();
   private ServerListPingHandler serverListPingHandler;
 
-  private final ListenersManager listenersManager = new ListenersManager();
+  private DockerClient dockerClient;
+  private final ListenersManager listenersManager = new ListenersManager(this);
+  private ServersManager serversManager;
 
   VelocityServer(final ProxyOptions options) {
     pluginManager = new VelocityPluginManager(this);
@@ -222,9 +228,13 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
 
     this.doStartupConfigLoad();
 
+    dockerClient = DockerClientBuilder.getInstance().build(); // TODO add credentials
+
     try {
-      BismuthServer bismuthServer = new BismuthServer(configuration.getBismuthHost(), configuration.getBismuthPort(), configuration.getBismuthPasswordHash(), listenersManager);
+      MessageDigest digest = MessageDigest.getInstance("SHA-256");
+      byte[] bismuthPasswordHash = digest.digest(configuration.getBismuthPassword());
 
+      BismuthServer bismuthServer = new BismuthServer(configuration.getBismuthHost(), configuration.getBismuthPort(), bismuthPasswordHash, listenersManager);
       bismuthServer.bind();
     } catch (NoSuchAlgorithmException | InterruptedException exception) {
       logger.error("Unable to start Bismuth server.", exception);
@@ -260,6 +270,9 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     }
 
     Metrics.VelocityMetrics.startMetrics(this, configuration.getMetrics());
+
+    serversManager = new ServersManager(this);
+    serversManager.start();
   }
 
   private void registerTranslations() {
@@ -518,8 +531,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
           // makes sure that all the disconnect events are being fired
 
           CompletableFuture<Void> playersTeardownFuture = CompletableFuture.allOf(players.stream()
-                  .map(ConnectedPlayer::getTeardownFuture)
-                  .toArray((IntFunction<CompletableFuture<Void>[]>) CompletableFuture[]::new));
+              .map(ConnectedPlayer::getTeardownFuture)
+              .toArray((IntFunction<CompletableFuture<Void>[]>) CompletableFuture[]::new));
 
           playersTeardownFuture.get(10, TimeUnit.SECONDS);
         } catch (TimeoutException e) {
@@ -542,6 +555,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
         Thread.currentThread().interrupt();
       }
 
+      serversManager.stop("Proxy shutdown.");
+
       // Since we manually removed the shutdown hook, we need to handle the shutdown ourselves.
       LogManager.shutdown();
 
@@ -607,7 +622,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     return !(connectionsByName.containsKey(lowerName)
         || connectionsByUuid.containsKey(connection.getUniqueId()));
   }
-  
+
   /**
    * Attempts to register the {@code connection} with the proxy.
    * @param connection the connection to register
@@ -666,7 +681,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
 
     return getAllPlayers().stream().filter(p -> p.getUsername()
             .regionMatches(true, 0, partialName, 0, partialName.length()))
-            .collect(Collectors.toList());
+        .collect(Collectors.toList());
   }
 
   @Override
@@ -675,7 +690,7 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
 
     return getAllServers().stream().filter(s -> s.getServerInfo().getName()
             .regionMatches(true, 0, partialName, 0, partialName.length()))
-            .collect(Collectors.toList());
+        .collect(Collectors.toList());
   }
 
   @Override
@@ -769,8 +784,15 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
     return new VelocityResourcePackInfo.BuilderImpl(url);
   }
 
+  public DockerClient getDockerClient() {
+    return dockerClient;
+  }
+
   public ListenersManager getListenersManager() {
     return listenersManager;
   }
 
+  public ServersManager getServersManager() {
+    return serversManager;
+  }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
index 2acd73d80954ac4b382f01c57e256ed68f7eb9f8..72906da07ae43cd784b6cb9e977e067760dc03d3 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
@@ -39,13 +39,9 @@ import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.StandardCopyOption;
 import java.security.SecureRandom;
-import java.util.Base64;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Optional;
-import java.util.Random;
+import java.util.*;
+
+import net.defade.bismuth.core.servers.GameType;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
@@ -139,26 +135,6 @@ public class VelocityConfiguration implements ProxyConfig {
           + "receive any support!");
     }
 
-    switch (playerInfoForwardingMode) {
-      case NONE:
-        logger.warn("Player info forwarding is disabled! All players will appear to be connecting "
-            + "from the proxy and will have offline-mode UUIDs.");
-        break;
-      case MODERN:
-      case BUNGEEGUARD:
-        if (forwardingSecret == null || forwardingSecret.length == 0) {
-          logger.error("You don't have a forwarding secret set. This is required for security.");
-          valid = false;
-        }
-        break;
-      default:
-        break;
-    }
-
-    if (servers.getServers().isEmpty()) {
-      logger.warn("You don't have any servers configured.");
-    }
-
     for (Map.Entry<String, String> entry : servers.getServers().entrySet()) {
       try {
         AddressUtil.parseAddress(entry.getValue());
@@ -168,28 +144,6 @@ public class VelocityConfiguration implements ProxyConfig {
       }
     }
 
-    for (String s : servers.getAttemptConnectionOrder()) {
-      if (!servers.getServers().containsKey(s)) {
-        logger.error("Fallback server " + s + " is not registered in your configuration!");
-        valid = false;
-      }
-    }
-
-    for (Map.Entry<String, List<String>> entry : forcedHosts.getForcedHosts().entrySet()) {
-      if (entry.getValue().isEmpty()) {
-        logger.error("Forced host '{}' does not contain any servers", entry.getKey());
-        valid = false;
-        continue;
-      }
-
-      for (String server : entry.getValue()) {
-        if (!servers.getServers().containsKey(server)) {
-          logger.error("Server '{}' for forced host '{}' does not exist", server, entry.getKey());
-          valid = false;
-        }
-      }
-    }
-
     try {
       getMotd();
     } catch (Exception e) {
@@ -293,6 +247,10 @@ public class VelocityConfiguration implements ProxyConfig {
     return forwardingSecret.clone();
   }
 
+  public void setForwardingSecret(byte[] forwardingSecret) {
+    this.forwardingSecret = forwardingSecret;
+  }
+
   @Override
   public Map<String, String> getServers() {
     return servers.getServers();
@@ -399,8 +357,12 @@ public class VelocityConfiguration implements ProxyConfig {
     return yokura.getBismuthPort();
   }
 
-  public byte[] getBismuthPasswordHash() {
-    return yokura.getBismuthPasswordHash();
+  public byte[] getBismuthPassword() {
+    return yokura.getBismuthPassword();
+  }
+
+  public Set<GameType> getGameTypes() {
+    return yokura.getGameTypes();
   }
 
   @Override
@@ -438,12 +400,6 @@ public class VelocityConfiguration implements ProxyConfig {
       throw new RuntimeException("Default configuration file does not exist.");
     }
 
-    // Create the forwarding-secret file on first-time startup if it doesn't exist
-    Path defaultForwardingSecretPath = Path.of("forwarding.secret");
-    if (Files.notExists(path) && Files.notExists(defaultForwardingSecretPath)) {
-      Files.writeString(defaultForwardingSecretPath, generateRandomString(12));
-    }
-
     boolean mustResave = false;
     CommentedFileConfig config = CommentedFileConfig.builder(path)
         .defaultData(defaultConfigLocation)
@@ -472,53 +428,6 @@ public class VelocityConfiguration implements ProxyConfig {
       configVersion = 1.0;
     }
 
-    // Whether or not this config version is older than 2.0 which uses the deprecated "forwarding-secret" parameter
-    boolean legacyConfig = configVersion < 2.0;
-
-    String forwardingSecretString;
-    byte[] forwardingSecret;
-
-    // Handle the previous (version 1.0) config
-    // There is duplicate/old code here in effort to make the future commit which abandons legacy config handling
-    // easier to implement. All that would be required is removing the if statement here and keeping the contents
-    // of the else block (with slight tidying).
-    if (legacyConfig) {
-      logger.warn("You are currently using a deprecated configuration version. The \"forwarding-secret\""
-          + " parameter has been recognized as a security concern and has been removed in config version 2.0."
-          + " It's recommended you rename your current \"velocity.toml\" to something else to allow Velocity"
-          + " to generate a config file of the new version. You may then configure that file as you normally would."
-          + " The only differences are the config-version and \"forwarding-secret\" has been replaced"
-          + " by \"forwarding-secret-file\".");
-
-      // Default legacy handling
-      forwardingSecretString = System.getenv()
-          .getOrDefault("VELOCITY_FORWARDING_SECRET", config.get("forwarding-secret"));
-      if (forwardingSecretString == null || forwardingSecretString.isEmpty()) {
-        forwardingSecretString = generateRandomString(12);
-        config.set("forwarding-secret", forwardingSecretString);
-        mustResave = true;
-      }
-    } else {
-      // New handling
-      forwardingSecretString = System.getenv().getOrDefault("VELOCITY_FORWARDING_SECRET", "");
-      if (forwardingSecretString.isEmpty()) {
-        String forwardSecretFile = config.get("forwarding-secret-file");
-        Path secretPath = forwardSecretFile == null
-            ? defaultForwardingSecretPath
-            : Path.of(forwardSecretFile);
-        if (Files.exists(secretPath)) {
-          if (Files.isRegularFile(secretPath)) {
-            forwardingSecretString = String.join("", Files.readAllLines(secretPath));
-          } else {
-            throw new RuntimeException("The file " + forwardSecretFile + " is not a valid file or it is a directory.");
-          }
-        } else {
-          throw new RuntimeException("The forwarding-secret-file does not exists.");
-        }
-      }
-    }
-    forwardingSecret = forwardingSecretString.getBytes(StandardCharsets.UTF_8);
-
     if (configVersion == 1.0 || configVersion == 2.0) {
       config.set("force-key-authentication", config.getOrElse("force-key-authentication", true));
       config.setComment("force-key-authentication",
@@ -533,18 +442,15 @@ public class VelocityConfiguration implements ProxyConfig {
     }
 
     // Read the rest of the config
-    CommentedConfig serversConfig = config.get("servers");
-    CommentedConfig forcedHostsConfig = config.get("forced-hosts");
     CommentedConfig advancedConfig = config.get("advanced");
     CommentedConfig queryConfig = config.get("query");
     CommentedConfig metricsConfig = config.get("metrics");
     CommentedConfig yokuraConfig = config.get("yokura");
-    PlayerInfoForwarding forwardingMode = config.getEnumOrElse("player-info-forwarding-mode",
-        PlayerInfoForwarding.NONE);
+    PlayerInfoForwarding forwardingMode = PlayerInfoForwarding.MODERN;
     PingPassthroughMode pingPassthroughMode = config.getEnumOrElse("ping-passthrough",
         PingPassthroughMode.DISABLED);
 
-    String bind = config.getOrElse("bind", "0.0.0.0:25577");
+    String bind = config.getOrElse("bind", "0.0.0.0:25565");
     String motd = config.getOrElse("motd", "&#09add3A Velocity Server");
     int maxPlayers = config.getIntOrElse("show-max-players", 500);
     Boolean onlineMode = config.getOrElse("online-mode", true);
@@ -555,14 +461,6 @@ public class VelocityConfiguration implements ProxyConfig {
     Boolean kickExisting = config.getOrElse("kick-existing-players", false);
     Boolean enablePlayerAddressLogging = config.getOrElse("enable-player-address-logging", true);
 
-    // Throw an exception if the forwarding-secret file is empty and the proxy is using a 
-    // forwarding mode that requires it.
-    if (forwardingSecret.length == 0
-        && (forwardingMode == PlayerInfoForwarding.MODERN
-        || forwardingMode == PlayerInfoForwarding.BUNGEEGUARD)) {
-      throw new RuntimeException("The forwarding-secret file must not be empty.");
-    }
-
     return new VelocityConfiguration(
         bind,
         motd,
@@ -571,12 +469,12 @@ public class VelocityConfiguration implements ProxyConfig {
         preventClientProxyConnections,
         announceForge,
         forwardingMode,
-        forwardingSecret,
+        new byte[0],
         kickExisting,
         pingPassthroughMode,
         enablePlayerAddressLogging,
-        new Servers(serversConfig),
-        new ForcedHosts(forcedHostsConfig),
+        new Servers(),
+        new ForcedHosts(),
         new Advanced(advancedConfig),
         new Query(queryConfig),
         new Metrics(metricsConfig),
@@ -601,12 +499,8 @@ public class VelocityConfiguration implements ProxyConfig {
 
   private static class Servers {
 
-    private Map<String, String> servers = ImmutableMap.of(
-        "lobby", "127.0.0.1:30066",
-        "factions", "127.0.0.1:30067",
-        "minigames", "127.0.0.1:30068"
-    );
-    private List<String> attemptConnectionOrder = ImmutableList.of("lobby");
+    private Map<String, String> servers = ImmutableMap.of();
+    private List<String> attemptConnectionOrder = Collections.synchronizedList(new ArrayList<>());
 
     private Servers() {
     }
@@ -674,11 +568,7 @@ public class VelocityConfiguration implements ProxyConfig {
 
   private static class ForcedHosts {
 
-    private Map<String, List<String>> forcedHosts = ImmutableMap.of(
-        "lobby.example.com", ImmutableList.of("lobby"),
-        "factions.example.com", ImmutableList.of("factions"),
-        "minigames.example.com", ImmutableList.of("minigames")
-    );
+    private Map<String, List<String>> forcedHosts = ImmutableMap.of();
 
     private ForcedHosts() {
     }
@@ -907,7 +797,9 @@ public class VelocityConfiguration implements ProxyConfig {
 
     private String bismuthHost = "0.0.0.0";
     private int bismuthPort = 9600;
-    private byte[] bismuthPasswordHash = new byte[0];
+    private byte[] bismuthPassword = new byte[0];
+
+    private Set<GameType> gameTypes = new HashSet<>();
 
     private Yokura() {
     }
@@ -916,7 +808,12 @@ public class VelocityConfiguration implements ProxyConfig {
       if (config != null) {
         this.bismuthHost = config.getOrElse("bismuth-host", "0.0.0.0");
         this.bismuthPort = config.getOrElse("bismuth-port", 9600);
-        this.bismuthPasswordHash = Base64.getDecoder().decode(config.getOrElse("bismuth-password", ""));
+        this.bismuthPassword = Base64.getDecoder().decode(config.getOrElse("bismuth-password", ""));
+
+        ArrayList<CommentedConfig> games = config.get("games");
+        for(CommentedConfig game : games) {
+          gameTypes.add(new GameType(game.get("game-name"), game.get("game-type")));
+        }
       }
     }
 
@@ -928,8 +825,12 @@ public class VelocityConfiguration implements ProxyConfig {
       return bismuthPort;
     }
 
-    public byte[] getBismuthPasswordHash() {
-      return bismuthPasswordHash;
+    public byte[] getBismuthPassword() {
+      return bismuthPassword;
+    }
+
+    public Set<GameType> getGameTypes() {
+      return gameTypes;
     }
   }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/server/VelocityRegisteredServer.java b/proxy/src/main/java/com/velocitypowered/proxy/server/VelocityRegisteredServer.java
index af49cf1e2381be7db33e304d504138cfe819d2e8..fa6b8260d16a80bd929261cf88920c61646da09d 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/server/VelocityRegisteredServer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/server/VelocityRegisteredServer.java
@@ -54,6 +54,7 @@ import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
+import net.defade.bismuth.core.servers.Server;
 import net.kyori.adventure.audience.Audience;
 import net.kyori.adventure.audience.ForwardingAudience;
 import org.checkerframework.checker.nullness.qual.NonNull;
@@ -64,6 +65,7 @@ public class VelocityRegisteredServer implements RegisteredServer, ForwardingAud
   private final @Nullable VelocityServer server;
   private final ServerInfo serverInfo;
   private final Map<UUID, ConnectedPlayer> players = new ConcurrentHashMap<>();
+  private Server bismuthServer;
 
   public VelocityRegisteredServer(@Nullable VelocityServer server, ServerInfo serverInfo) {
     this.server = server;
@@ -85,6 +87,16 @@ public class VelocityRegisteredServer implements RegisteredServer, ForwardingAud
     return ping(null, ProtocolVersion.UNKNOWN);
   }
 
+  @Override
+  public Server getBismuthServer() {
+    return bismuthServer;
+  }
+
+  @Override
+  public void setBismuthServer(Server server) {
+    this.bismuthServer = server;
+  }
+
   /**
    * Pings the specified server using the specified event {@code loop}, claiming to be
    * {@code version}.
diff --git a/proxy/src/main/java/net/defade/velocity/listeners/ListenersManager.java b/proxy/src/main/java/net/defade/velocity/listeners/ListenersManager.java
index 13b22887e48e73cf196f9e366b5f61d48f221622..e5016b77da130b1311f761088e62f381bc8e8d0f 100644
--- a/proxy/src/main/java/net/defade/velocity/listeners/ListenersManager.java
+++ b/proxy/src/main/java/net/defade/velocity/listeners/ListenersManager.java
@@ -1,5 +1,6 @@
 package net.defade.velocity.listeners;
 
+import com.velocitypowered.proxy.VelocityServer;
 import net.defade.bismuth.core.listeners.server.ServerPacketListener;
 import net.defade.bismuth.core.protocol.ConnectionProtocol;
 import net.defade.bismuth.core.servers.Server;
@@ -10,9 +11,11 @@ import java.util.Map;
 import java.util.Set;
 
 public class ListenersManager implements ServerInfosProvider {
+  private final VelocityServer velocityServer;
   private final Map<ConnectionProtocol, Set<ServerPacketListener>> listeners = new HashMap<>();
 
-  public ListenersManager() {
+  public ListenersManager(VelocityServer velocityServer) {
+    this.velocityServer = velocityServer;
 
     for(ConnectionProtocol protocols : ConnectionProtocol.values()) {
       if(protocols == ConnectionProtocol.LOGIN) continue;
@@ -28,7 +31,7 @@ public class ListenersManager implements ServerInfosProvider {
   public ServerPacketListener getPacketListenerFromProtocol(ConnectionProtocol connectionProtocol) {
     switch (connectionProtocol) {
       case YOKURA:
-        YokuraListener yokuraListener = new YokuraListener();
+        YokuraListener yokuraListener = new YokuraListener(velocityServer);
         listeners.get(connectionProtocol).add(yokuraListener);
         return yokuraListener;
     }
@@ -38,6 +41,6 @@ public class ListenersManager implements ServerInfosProvider {
 
   @Override
   public Server getServerFromServerId(String serverId) {
-    return null;
+    return velocityServer.getServer(serverId).orElseThrow().getBismuthServer();
   }
 }
diff --git a/proxy/src/main/java/net/defade/velocity/listeners/YokuraListener.java b/proxy/src/main/java/net/defade/velocity/listeners/YokuraListener.java
index 62fab72126f0d141204dd12e1337568f4643bd33..64e9fc1fbb7aa27733bba976853a83bf20382158 100644
--- a/proxy/src/main/java/net/defade/velocity/listeners/YokuraListener.java
+++ b/proxy/src/main/java/net/defade/velocity/listeners/YokuraListener.java
@@ -1,7 +1,42 @@
 package net.defade.velocity.listeners;
 
+import com.velocitypowered.api.proxy.server.RegisteredServer;
+import com.velocitypowered.proxy.VelocityServer;
 import net.defade.bismuth.core.listeners.server.YokuraServerPacketListener;
+import net.defade.bismuth.core.protocol.ConnectionProtocol;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundForwardingKeyPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundServersListPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundUpdateServerStatusPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.server.ServerboundUpdateServerStatusPacket;
+import net.defade.bismuth.core.servers.Server;
+import java.util.Set;
+import java.util.stream.Collectors;
 
 public class YokuraListener extends YokuraServerPacketListener {
+  private final VelocityServer velocityServer;
 
+  public YokuraListener(VelocityServer velocityServer) {
+    this.velocityServer = velocityServer;
+  }
+
+  @Override
+  public void updateServerStatus(ServerboundUpdateServerStatusPacket updateServerStatusPacket) {
+    super.updateServerStatus(updateServerStatusPacket);
+
+    ClientboundUpdateServerStatusPacket clientboundUpdateServerStatusPacket = new ClientboundUpdateServerStatusPacket(getServer(), updateServerStatusPacket.getServerStatus());
+    velocityServer.getListenersManager().getListenersForProtocol(ConnectionProtocol.YOKURA).forEach(listeners -> listeners.sendPacket(clientboundUpdateServerStatusPacket));
+  }
+
+  @Override
+  public void channelActive() {
+    sendPacket(new ClientboundForwardingKeyPacket(velocityServer.getServersManager().getForwardingKey()));
+
+    Set<Server> servers = velocityServer.getAllServers().stream().map(RegisteredServer::getBismuthServer).collect(Collectors.toSet());
+    sendPacket(new ClientboundServersListPacket(servers));
+  }
+
+  @Override
+  public void channelInactive() {
+    velocityServer.getServersManager().unregisterServer(getServer());
+  }
 }
diff --git a/proxy/src/main/java/net/defade/velocity/servers/ServersManager.java b/proxy/src/main/java/net/defade/velocity/servers/ServersManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..1d72014f3027efd379a8b149b27b81880a8804ca
--- /dev/null
+++ b/proxy/src/main/java/net/defade/velocity/servers/ServersManager.java
@@ -0,0 +1,165 @@
+package net.defade.velocity.servers;
+
+import com.github.dockerjava.api.command.CreateContainerResponse;
+import com.github.dockerjava.api.model.ExposedPort;
+import com.github.dockerjava.api.model.HostConfig;
+import com.github.dockerjava.api.model.Ports;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.velocitypowered.api.proxy.server.RegisteredServer;
+import com.velocitypowered.api.proxy.server.ServerInfo;
+import com.velocitypowered.proxy.VelocityServer;
+import com.velocitypowered.proxy.config.VelocityConfiguration;
+import net.defade.bismuth.core.listeners.server.ServerPacketListener;
+import net.defade.bismuth.core.protocol.ConnectionProtocol;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundCreatedServerPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundForwardingKeyPacket;
+import net.defade.bismuth.core.protocol.packets.yokura.client.ClientboundStopServerPacket;
+import net.defade.bismuth.core.servers.GameType;
+import net.defade.bismuth.core.servers.Server;
+import net.defade.bismuth.core.servers.ServerStatus;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.ServerSocket;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Timer;
+import java.util.TimerTask;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadLocalRandom;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class ServersManager {
+  private final Logger LOGGER = LogManager.getLogger(ServersManager.class);
+
+  private final VelocityServer velocityServer;
+  private final VelocityConfiguration velocityConfiguration;
+
+  private final ExecutorService serverCreationThreadPool = Executors.newFixedThreadPool(2, new ThreadFactoryBuilder().setNameFormat("Server Creation Thread #").build());
+  private final Timer timer = new Timer("Server manager Scheduler");
+
+  private final Map<String, String> serversContainers = new HashMap<>();
+  private final AtomicInteger serverIdProvider = new AtomicInteger(0);
+  private final byte[] forwardingKey = new byte[256];
+
+  private boolean isStopping = false;
+
+  public ServersManager(VelocityServer velocityServer) {
+    this.velocityServer = velocityServer;
+    this.velocityConfiguration = velocityServer.getConfiguration();
+  }
+
+  public void start() {
+    timer.scheduleAtFixedRate(new TimerTask() {
+      @Override
+      public void run() {
+        ThreadLocalRandom.current().nextBytes(forwardingKey);
+        ClientboundForwardingKeyPacket forwardingKeyPacket = new ClientboundForwardingKeyPacket(forwardingKey);
+        velocityServer.getListenersManager().getListenersForProtocol(ConnectionProtocol.YOKURA).forEach(packetListener -> packetListener.sendPacket(forwardingKeyPacket));
+        velocityConfiguration.setForwardingSecret(forwardingKey);
+
+        for (GameType gameTypes : velocityConfiguration.getGameTypes()) {
+          if (velocityServer.getAllServers().stream().anyMatch(server -> server.getBismuthServer().getGameType().equals(gameTypes)))
+            continue;
+          serverCreationThreadPool.submit(() -> startServer(gameTypes));
+          serverCreationThreadPool.submit(() -> startServer(gameTypes));
+        }
+      }
+    }, 0, 2000);
+  }
+
+  private void startServer(GameType gameType) {
+    String serverId = gameType.toString() + serverIdProvider.getAndIncrement();
+    int port;
+
+    try {
+      ServerSocket serverSocket = new ServerSocket(0);
+      port = serverSocket.getLocalPort();
+      serverSocket.close();
+    } catch (IOException exception) {
+      LOGGER.error("Couldn't retrieve a port for a server.", exception);
+      return;
+    }
+
+    ExposedPort serverPort = ExposedPort.tcp(25565);
+    Ports portBindings = new Ports();
+    portBindings.bind(serverPort, Ports.Binding.bindPort(port));
+
+    CreateContainerResponse createContainerResponse = velocityServer.getDockerClient()
+        .createContainerCmd(gameType.toString())
+        .withCmd(
+            "--server-id=" + serverId,
+            "--bismuth-host=172.17.0.1",
+            "--bismuth-port=" + velocityConfiguration.getBismuthPort(),
+            "--bismuth-password=" + Base64.getEncoder().encodeToString(velocityConfiguration.getBismuthPassword())
+        )
+        .withName(serverId)
+        .withExposedPorts(serverPort)
+        .withHostConfig(new HostConfig()
+            .withAutoRemove(true)
+            .withPortBindings(portBindings)
+        )
+        .exec();
+
+    RegisteredServer registeredServer = velocityServer.registerServer(new ServerInfo(serverId, new InetSocketAddress("localhost", port)));
+    Server bismuthServer = new Server(serverId, gameType, ServerStatus.ACCEPTING_PLAYERS);
+    registeredServer.setBismuthServer(bismuthServer);
+
+    if (gameType.getMiniGame().contains("hub")) {
+      velocityConfiguration.getAttemptConnectionOrder().add(serverId);
+    }
+
+    velocityServer.getDockerClient().startContainerCmd(createContainerResponse.getId()).exec();
+    serversContainers.put(serverId, createContainerResponse.getId());
+
+    ClientboundCreatedServerPacket createdServerPacket = new ClientboundCreatedServerPacket(bismuthServer);
+    velocityServer.getListenersManager().getListenersForProtocol(ConnectionProtocol.YOKURA).forEach(listeners -> listeners.sendPacket(createdServerPacket));
+
+    LOGGER.info("Created a " + gameType + " server.");
+  }
+
+  public void unregisterServer(Server server) {
+    serversContainers.remove(server.getServerId());
+    RegisteredServer registeredServer = velocityServer.getServer(server.getServerId()).orElseThrow();
+
+    velocityServer.unregisterServer(registeredServer.getServerInfo());
+    velocityConfiguration.getAttemptConnectionOrder().remove(registeredServer.getServerInfo().getName());
+
+    LOGGER.info("Unregistered the " + registeredServer.getServerInfo().getName() + " server.");
+
+    if(isStopping && serversContainers.isEmpty()) {
+      synchronized (serversContainers) {
+        serversContainers.notify();
+      }
+    }
+  }
+
+  public void stop(String reason) {
+    isStopping = true;
+    timer.cancel();
+
+    LOGGER.info("Stopping servers...");
+
+    ClientboundStopServerPacket stopServerPacket = new ClientboundStopServerPacket(reason);
+    for(ServerPacketListener yokuraListeners : velocityServer.getListenersManager().getListenersForProtocol(ConnectionProtocol.YOKURA)) {
+      yokuraListeners.sendPacket(stopServerPacket);
+    }
+
+    synchronized (serversContainers) {
+      try {
+        serversContainers.wait();
+      } catch (InterruptedException e) {
+        throw new RuntimeException(e);
+      }
+    }
+
+    LOGGER.info("Servers stopped.");
+  }
+
+  public byte[] getForwardingKey() {
+    return forwardingKey;
+  }
+}
diff --git a/proxy/src/main/resources/default-velocity.toml b/proxy/src/main/resources/default-velocity.toml
index 954c8c2947867fe7550250e8b533fbdb98b39d6b..5fccf8dbaab61a64607ccea7320d3bbb7ef08958 100644
--- a/proxy/src/main/resources/default-velocity.toml
+++ b/proxy/src/main/resources/default-velocity.toml
@@ -2,7 +2,7 @@
 config-version = "2.5"
 
 # What port should the proxy be bound to? By default, we'll bind to all addresses on port 25577.
-bind = "0.0.0.0:25577"
+bind = "0.0.0.0:25565"
 
 # What should be the MOTD? This gets displayed when the player adds your server to
 # their server list. Legacy color codes and JSON are accepted.
@@ -23,23 +23,6 @@ force-key-authentication = true
 # connections but is a weak form of protection.
 prevent-client-proxy-connections = false
 
-# Should we forward IP addresses and other data to backend servers?
-# Available options:
-# - "none":        No forwarding will be done. All players will appear to be connecting
-#                  from the proxy and will have offline-mode UUIDs.
-# - "legacy":      Forward player IPs and UUIDs in a BungeeCord-compatible format. Use this
-#                  if you run servers using Minecraft 1.12 or lower.
-# - "bungeeguard": Forward player IPs and UUIDs in a format supported by the BungeeGuard
-#                  plugin. Use this if you run servers using Minecraft 1.12 or lower, and are
-#                  unable to implement network level firewalling (on a shared host).
-# - "modern":      Forward player IPs and UUIDs as part of the login process using
-#                  Velocity's native forwarding. Only applicable for Minecraft 1.13 or higher.
-player-info-forwarding-mode = "NONE"
-
-# If you are using modern or BungeeGuard IP forwarding, configure a file that contains a unique secret here.
-# The file is expected to be UTF-8 encoded and not empty.
-forwarding-secret-file = "forwarding.secret"
-
 # Announce whether or not your server supports Forge. If you run a modded server, we
 # suggest turning this on.
 # 
@@ -69,30 +52,6 @@ ping-passthrough = "DISABLED"
 # If not enabled (default is true) player IP addresses will be replaced by <ip address withheld> in logs
 enable-player-address-logging = true
 
-[servers]
-# Configure your servers here. Each key represents the server's name, and the value
-# represents the IP address of the server to connect to.
-lobby = "127.0.0.1:30066"
-factions = "127.0.0.1:30067"
-minigames = "127.0.0.1:30068"
-
-# In what order we should try servers when a player logs in or is kicked from a server.
-try = [
-  "lobby"
-]
-
-[forced-hosts]
-# Configure your forced hosts here.
-"lobby.example.com" = [
-  "lobby"
-]
-"factions.example.com" = [
-  "factions"
-]
-"minigames.example.com" = [
-  "minigames"
-]
-
 [advanced]
 # How large a Minecraft packet has to be before we compress it. Setting this to zero will
 # compress all packets, and setting it to -1 will disable compression entirely.
@@ -162,4 +121,8 @@ bismuth-host = "0.0.0.0"
 bismuth-port = 9600
 
 # The password for bismuth, encrypted in SHA256 and encoded in base64.
-bismuth-password = ""
\ No newline at end of file
+bismuth-password = ""
+
+games = [
+    {game-name = "hub", game-type = "default"}
+]
\ No newline at end of file
