From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Tue, 2 Aug 2022 00:04:39 +0200
Subject: [PATCH] Add Bismuth


diff --git a/api/build.gradle.kts b/api/build.gradle.kts
index 1e448d0c2997f00efeed419bd68c310dda2fc36e..4059bf0c0a428b6fa2b838a70ae1822890c8f48a 100644
--- a/api/build.gradle.kts
+++ b/api/build.gradle.kts
@@ -17,6 +17,9 @@ java {
 }
 
 dependencies {
+    api(libs.bismuth) {
+        exclude(group = "org.apache.logging", module = "log4j")
+    }
     api(libs.gson)
     api(libs.guava)
 
diff --git a/build.gradle.kts b/build.gradle.kts
index f1a64c850551f4bc16761b5af92089abf27d9b28..baaae882ef6fcc32391bb35657f6e4a47f8c1d6c 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -23,6 +23,10 @@ subprojects {
         mavenCentral()
         maven("https://s01.oss.sonatype.org/content/repositories/snapshots/") // adventure
         maven("https://repo.papermc.io/repository/maven-public/")
+        maven("https://repo.defade.net/defade") {
+            name = "defade"
+            credentials(PasswordCredentials::class)
+        }
     }
 
     dependencies {
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
index e2e762c018ca6292facf4e9acadb805e5b78e5b6..33dd663b5c839423704d4003f25c6ddb0058467a 100644
--- a/gradle/libs.versions.toml
+++ b/gradle/libs.versions.toml
@@ -10,6 +10,7 @@ shadow = "com.github.johnrengelman.shadow:8.1.0"
 spotless = "com.diffplug.spotless:6.12.0"
 
 [libraries]
+bismuth = "net.defade.bismuth:server:1.1.0"
 adventure-bom = "net.kyori:adventure-bom:4.13.1"
 adventure-facet = "net.kyori:adventure-platform-facet:4.3.0"
 asynchttpclient = "org.asynchttpclient:async-http-client:2.12.3"
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
index f82fd45d545e6259964cd3cdfc6fbf34a12958b9..8c69010c2cc85b59bd3ec37ed8b25679c5817d53 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/VelocityServer.java
@@ -74,6 +74,7 @@ import java.nio.file.Files;
 import java.nio.file.Path;
 import java.security.AccessController;
 import java.security.KeyPair;
+import java.security.NoSuchAlgorithmException;
 import java.security.PrivilegedAction;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -91,6 +92,8 @@ import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.IntFunction;
 import java.util.stream.Collectors;
+import net.defade.bismuth.server.BismuthServer;
+import net.defade.velocity.listeners.ListenersManager;
 import net.kyori.adventure.audience.Audience;
 import net.kyori.adventure.audience.ForwardingAudience;
 import net.kyori.adventure.key.Key;
@@ -148,6 +151,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
   private final VelocityChannelRegistrar channelRegistrar = new VelocityChannelRegistrar();
   private ServerListPingHandler serverListPingHandler;
 
+  private final ListenersManager listenersManager = new ListenersManager();
+
   VelocityServer(final ProxyOptions options) {
     pluginManager = new VelocityPluginManager(this);
     eventManager = new VelocityEventManager(pluginManager);
@@ -219,6 +224,18 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
 
     this.doStartupConfigLoad();
 
+    try {
+      BismuthServer bismuthServer = new BismuthServer(configuration.getBismuthHost(), configuration.getBismuthPort(),
+              configuration.getBismuthPasswordHash(), listenersManager);
+
+      bismuthServer.bind();
+    } catch (NoSuchAlgorithmException | InterruptedException exception) {
+      logger.error("Unable to start Bismuth server.", exception);
+      LogManager.shutdown();
+      System.exit(1);
+      return;
+    }
+
     for (Map.Entry<String, String> entry : configuration.getServers().entrySet()) {
       servers.register(new ServerInfo(entry.getKey(), AddressUtil.parseAddress(entry.getValue())));
     }
@@ -765,4 +782,8 @@ public class VelocityServer implements ProxyServer, ForwardingAudience {
   public ResourcePackInfo.Builder createResourcePackBuilder(String url) {
     return new VelocityResourcePackInfo.BuilderImpl(url);
   }
+
+  public ListenersManager getListenersManager() {
+    return listenersManager;
+  }
 }
diff --git a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
index 3afd9fc107034dd104cfb4fddfb8ab1c32fa0c8b..19cf6bef5e59d73f12438a126e8e6b7bc57fc37a 100644
--- a/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
+++ b/proxy/src/main/java/com/velocitypowered/proxy/config/VelocityConfiguration.java
@@ -35,6 +35,7 @@ import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.security.SecureRandom;
+import java.util.Base64;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
@@ -88,14 +89,16 @@ public class VelocityConfiguration implements ProxyConfig {
   private @Nullable Favicon favicon;
   @Expose
   private boolean forceKeyAuthentication = true; // Added in 1.19
+  private final Yokura yokura;
 
   private VelocityConfiguration(Servers servers, ForcedHosts forcedHosts, Advanced advanced,
-      Query query, Metrics metrics) {
+      Query query, Metrics metrics, Yokura yokura) {
     this.servers = servers;
     this.forcedHosts = forcedHosts;
     this.advanced = advanced;
     this.query = query;
     this.metrics = metrics;
+    this.yokura = yokura;
   }
 
   private VelocityConfiguration(String bind, String motd, int showMaxPlayers, boolean onlineMode,
@@ -103,7 +106,8 @@ public class VelocityConfiguration implements ProxyConfig {
       PlayerInfoForwarding playerInfoForwardingMode, byte[] forwardingSecret,
       boolean onlineModeKickExistingPlayers, PingPassthroughMode pingPassthrough,
       boolean enablePlayerAddressLogging, Servers servers, ForcedHosts forcedHosts,
-      Advanced advanced, Query query, Metrics metrics, boolean forceKeyAuthentication) {
+      Advanced advanced, Query query, Metrics metrics, boolean forceKeyAuthentication,
+      Yokura yokura) {
     this.bind = bind;
     this.motd = motd;
     this.showMaxPlayers = showMaxPlayers;
@@ -121,6 +125,7 @@ public class VelocityConfiguration implements ProxyConfig {
     this.query = query;
     this.metrics = metrics;
     this.forceKeyAuthentication = forceKeyAuthentication;
+    this.yokura = yokura;
   }
 
   /**
@@ -396,6 +401,18 @@ public class VelocityConfiguration implements ProxyConfig {
     return forceKeyAuthentication;
   }
 
+  public String getBismuthHost() {
+    return yokura.getBismuthHost();
+  }
+
+  public int getBismuthPort() {
+    return yokura.getBismuthPort();
+  }
+
+  public byte[] getBismuthPasswordHash() {
+    return yokura.getBismuthPasswordHash();
+  }
+
   @Override
   public String toString() {
     return MoreObjects.toStringHelper(this)
@@ -550,6 +567,7 @@ public class VelocityConfiguration implements ProxyConfig {
     CommentedConfig advancedConfig = config.get("advanced");
     CommentedConfig queryConfig = config.get("query");
     CommentedConfig metricsConfig = config.get("metrics");
+    CommentedConfig yokuraConfig = config.get("yokura");
     PlayerInfoForwarding forwardingMode = config.getEnumOrElse("player-info-forwarding-mode",
         PlayerInfoForwarding.NONE);
     PingPassthroughMode pingPassthroughMode = config.getEnumOrElse("ping-passthrough",
@@ -590,7 +608,8 @@ public class VelocityConfiguration implements ProxyConfig {
         new Advanced(advancedConfig),
         new Query(queryConfig),
         new Metrics(metricsConfig),
-        forceKeyAuthentication
+        forceKeyAuthentication,
+        new Yokura(yokuraConfig)
     );
   }
 
@@ -931,4 +950,34 @@ public class VelocityConfiguration implements ProxyConfig {
       return enabled;
     }
   }
+
+  private static class Yokura {
+
+    private String bismuthHost = "0.0.0.0";
+    private int bismuthPort = 9600;
+    private byte[] bismuthPasswordHash = new byte[0];
+
+    private Yokura() {
+    }
+
+    private Yokura(CommentedConfig config) {
+      if (config != null) {
+        this.bismuthHost = config.getOrElse("bismuth-host", "0.0.0.0");
+        this.bismuthPort = config.getOrElse("bismuth-port", 9600);
+        this.bismuthPasswordHash = Base64.getDecoder().decode(config.getOrElse("bismuth-password", ""));
+      }
+    }
+
+    public String getBismuthHost() {
+      return bismuthHost;
+    }
+
+    public int getBismuthPort() {
+      return bismuthPort;
+    }
+
+    public byte[] getBismuthPasswordHash() {
+      return bismuthPasswordHash;
+    }
+  }
 }
diff --git a/proxy/src/main/java/net/defade/velocity/listeners/ListenersManager.java b/proxy/src/main/java/net/defade/velocity/listeners/ListenersManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..69ef4cea04f5c515886f0d251b274cfa043de5e7
--- /dev/null
+++ b/proxy/src/main/java/net/defade/velocity/listeners/ListenersManager.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright (C) 2018 Velocity Contributors
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package net.defade.velocity.listeners;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import net.defade.bismuth.core.listeners.server.ServerPacketListener;
+import net.defade.bismuth.core.protocol.ConnectionProtocol;
+import net.defade.bismuth.core.protocol.packets.Packet;
+import net.defade.bismuth.core.servers.GameType;
+import net.defade.bismuth.core.servers.Server;
+import net.defade.bismuth.core.utils.NetworkInfos;
+import net.defade.bismuth.core.utils.ServerInfosProvider;
+
+public class ListenersManager implements ServerInfosProvider {
+  private final Map<ConnectionProtocol, Set<ServerPacketListener>> listeners = new HashMap<>();
+
+  public ListenersManager() {
+
+    for (ConnectionProtocol protocols : ConnectionProtocol.values()) {
+      if (protocols == ConnectionProtocol.LOGIN) {
+        continue;
+      }
+
+      listeners.put(protocols, new HashSet<>());
+    }
+  }
+
+  public Set<ServerPacketListener> getListenersForProtocol(ConnectionProtocol protocol) {
+    return listeners.get(protocol);
+  }
+
+  public void sendPacketForProtocol(ConnectionProtocol protocol, Packet<?> packet) {
+    getListenersForProtocol(protocol).forEach(listener -> listener.sendPacket(packet));
+  }
+
+  @Override
+  public ServerPacketListener getPacketListenerFromProtocol(ConnectionProtocol connectionProtocol) {
+    switch (connectionProtocol) {
+      case YOKURA:
+        YokuraListener yokuraListener = new YokuraListener();
+        listeners.get(connectionProtocol).add(yokuraListener);
+        return yokuraListener;
+
+      default:
+        return null;
+    }
+  }
+
+  @Override
+  public NetworkInfos getNetworkInfos() {
+    return null;
+  }
+
+  @Override
+  public Server getServer(GameType gameType, String velocityIdTracker) {
+    return null;
+  }
+}
diff --git a/proxy/src/main/java/net/defade/velocity/listeners/YokuraListener.java b/proxy/src/main/java/net/defade/velocity/listeners/YokuraListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..887f292b99280fb3cfd037758e0cb4b129c5a2de
--- /dev/null
+++ b/proxy/src/main/java/net/defade/velocity/listeners/YokuraListener.java
@@ -0,0 +1,24 @@
+/*
+ * Copyright (C) 2018 Velocity Contributors
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package net.defade.velocity.listeners;
+
+import net.defade.bismuth.core.listeners.server.YokuraServerPacketListener;
+
+public class YokuraListener extends YokuraServerPacketListener {
+
+}
diff --git a/proxy/src/main/resources/default-velocity.toml b/proxy/src/main/resources/default-velocity.toml
index 0f18208b551dfbb51911491cf0dd95a7190dd121..c911d407a38242b9c6ffc6ce768e03c01e984d5c 100644
--- a/proxy/src/main/resources/default-velocity.toml
+++ b/proxy/src/main/resources/default-velocity.toml
@@ -153,3 +153,13 @@ map = "Velocity"
 
 # Whether plugins should be shown in query response by default or not
 show-plugins = false
+
+[yokura]
+# The host bismuth will use.
+bismuth-host = "0.0.0.0"
+
+# The port bismuth will be bound to.
+bismuth-port = 9600
+
+# The password for bismuth, encrypted in SHA256 and encoded in base64.
+bismuth-password = ""
\ No newline at end of file
